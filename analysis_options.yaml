# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # ✅ General Clean Code
    always_declare_return_types: true          # Forces you to write return types (clean & readable)
    avoid_print: true                          # Use logging instead of print() in production
    avoid_unnecessary_containers: true         # Flags empty containers that do nothing
    avoid_empty_else: true                     # Empty else blocks usually indicate missed logic
    prefer_final_fields: true                  # Makes fields immutable unless they *need* to be mutable
    prefer_final_locals: true                  # Like above, but for local vars — good habit

    # ✅ Readability & Maintainability
    annotate_overrides: true                   # Forces you to mark methods that override something
    avoid_returning_null: true                 # Instead of returning `null`, use Optionals or meaningful fallback
    prefer_const_constructors: true            # Better for performance (especially in build methods)
    prefer_const_literals_to_create_immutables: true # More const = better performance
    unnecessary_this: true                     # Makes code cleaner when `this` is not required

    # ✅ Code Safety
    no_logic_in_create_state: true             # Flutter specific — state logic should go in `initState`
    use_key_in_widget_constructors: true       # Prevents widget rebuild issues
    avoid_init_to_null: true                   # Dart already initializes variables to null

    # ✅ Dart-specific
    avoid_types_on_closure_parameters: false   # Set to `true` if you want cleaner lambdas
    use_function_type_syntax_for_parameters: true # Cleans up typedefs
    curly_braces_in_flow_control_structures: true # Forces `{}` even for 1-liners in if/else

    # ✅ Consistency & Best Practices
    constant_identifier_names: true            # For consts like `MAX_SIZE`
    prefer_single_quotes: true                 # Cleaner and more consistent
    unnecessary_new: true                      # `new` keyword is dead in Dart 2
    avoid_positional_boolean_parameters: false # Optional: use named params for readability
    prefer_expression_function_bodies: true    # Makes small functions sexier

    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule


analyzer:
  exclude:
    - "**.g.dart"
    - "**.freezed.dart"
    - "**.gr.dart"
    - "**.config.dart"

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
